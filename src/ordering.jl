#This function creates the Spline patches

function order_plot(A::Array,d::Int)



    k=size(A,3);
    t=[0,1];
    S=[];

    if d==3
        b=BSplineBasis(t,4);
        for i in 1:k
            P=zeros(3,4,4);
            P[:,1,1]=A[:,1,i];
            P[:,2,1]=A[:,2,i];
            P[:,3,1]=A[:,7,i];
            P[:,4,1]=A[:,5,i];
            P[:,1,2]=A[:,3,i];
            P[:,2,2]=A[:,4,i];
            P[:,3,2]=A[:,8,i];
            P[:,4,2]=A[:,6,i];
            P[:,1,3]=A[:,14,i];
            P[:,2,3]=A[:,16,i];
            P[:,3,3]=A[:,12,i];
            P[:,4,3]=A[:,11,i];
            P[:,1,4]=A[:,13,i];
            P[:,2,4]=A[:,15,i];
            P[:,3,4]=A[:,10,i];
            P[:,4,4]=A[:,9,i];

            #push!(S,BSplineSurface(P,b,b,color=Color(255,204,153)));
            push!(S,BSplineSurface(P,b,b));
            S[end][:color] = Color(rand(0:255),rand(0:255),rand(0:255));

        end

    elseif d==5
        b=BSplineBasis(t,6);
        for i in 1:k
            P=zeros(3,6,6);
            P[:,1,1]=A[:,1,i];
            P[:,2,1]=A[:,2,i];
            P[:,3,1]=A[:,3,i];
            P[:,4,1]=A[:,16,i];
            P[:,5,1]=A[:,13,i];
            P[:,6,1]=A[:,10,i];

            P[:,1,2]=A[:,4,i];
            P[:,2,2]=A[:,5,i];
            P[:,3,2]=A[:,6,i];
            P[:,4,2]=A[:,17,i];
            P[:,5,2]=A[:,14,i];
            P[:,6,2]=A[:,11,i];

            P[:,1,3]=A[:,7,i];
            P[:,2,3]=A[:,8,i];
            P[:,3,3]=A[:,9,i];
            P[:,4,3]=A[:,18,i];
            P[:,5,3]=A[:,15,i];
            P[:,6,3]=A[:,12,i];

            P[:,1,4]=A[:,30,i];
            P[:,2,4]=A[:,33,i];
            P[:,3,4]=A[:,36,i];
            P[:,4,4]=A[:,27,i];
            P[:,5,4]=A[:,26,i];
            P[:,6,4]=A[:,25,i];

            P[:,1,5]=A[:,29,i];
            P[:,2,5]=A[:,32,i];
            P[:,3,5]=A[:,35,i];
            P[:,4,5]=A[:,24,i];
            P[:,5,5]=A[:,23,i];
            P[:,6,5]=A[:,22,i];

            P[:,1,6]=A[:,28,i];
            P[:,2,6]=A[:,31,i];
            P[:,3,6]=A[:,34,i];
            P[:,4,6]=A[:,21,i];
            P[:,5,6]=A[:,20,i];
            P[:,6,6]=A[:,19,i];

            #push!(S,BSplineSurface(P,b,b,color=Color(255,204,153)));
            push!(S,BSplineSurface(P,b,b));
            S[end][:color] = Color(rand(0:255),rand(0:255),rand(0:255));

        end
    end

    return S;

end

#This function order the masks in the proper way to execute operations

function ordermatrix(M2::Array,N::Int64, S::String)
  if S=="BEV"
      B=zeros(3*N+3,36);
      B[:,1]=M2[1,1];
      B[:,2]=M2[1,2];
      B[:,3]=M2[1,3];
      B[:,4]=M2[2,1];
      B[:,5]=M2[2,2];
      B[:,6]=M2[2,3];
      B[:,7]=M2[3,1];
      B[:,8]=M2[3,2];
      B[:,9]=M2[3,3];
      B[:,10]=M2[1,6];
      B[:,11]=M2[2,6];
      B[:,12]=M2[3,6];
      B[:,13]=M2[1,5];
      B[:,14]=M2[2,5];
      B[:,15]=M2[3,5];
      B[:,16]=M2[1,4];
      B[:,17]=M2[2,4];
      B[:,18]=M2[3,4];
      B[:,19]=M2[6,6];
      B[:,20]=M2[6,5];
      B[:,21]=M2[6,4];
      B[:,22]=M2[5,6];
      B[:,23]=M2[5,5];
      B[:,24]=M2[5,4];
      B[:,25]=M2[4,6];
      B[:,26]=M2[4,5];
      B[:,27]=M2[4,4];
      B[:,28]=M2[6,1];
      B[:,29]=M2[5,1];
      B[:,30]=M2[4,1];
      B[:,31]=M2[6,2];
      B[:,32]=M2[5,2];
      B[:,33]=M2[4,2];
      B[:,34]=M2[6,3];
      B[:,35]=M2[5,3];
      B[:,36]=M2[4,3];
  elseif S=="EVREGBORDER"
      B=zeros(2*N+1,36);
      B[:,1]=M2[1,1];
      B[:,2]=M2[1,2];
      B[:,3]=M2[1,3];
      B[:,4]=M2[2,1];
      B[:,5]=M2[2,2];
      B[:,6]=M2[2,3];
      B[:,7]=M2[3,1];
      B[:,8]=M2[3,2];
      B[:,9]=M2[3,3];
      B[:,10]=M2[1,6];
      B[:,11]=M2[2,6];
      B[:,12]=M2[3,6];
      B[:,13]=M2[1,5];
      B[:,14]=M2[2,5];
      B[:,15]=M2[3,5];
      B[:,16]=M2[1,4];
      B[:,17]=M2[2,4];
      B[:,18]=M2[3,4];
      B[:,19]=M2[6,6];
      B[:,20]=M2[6,5];
      B[:,21]=M2[6,4];
      B[:,22]=M2[5,6];
      B[:,23]=M2[5,5];
      B[:,24]=M2[5,4];
      B[:,25]=M2[4,6];
      B[:,26]=M2[4,5];
      B[:,27]=M2[4,4];
      B[:,28]=M2[6,1];
      B[:,29]=M2[5,1];
      B[:,30]=M2[4,1];
      B[:,31]=M2[6,2];
      B[:,32]=M2[5,2];
      B[:,33]=M2[4,2];
      B[:,34]=M2[6,3];
      B[:,35]=M2[5,3];
      B[:,36]=M2[4,3];
else
      B=zeros(6*N+1,36);
      B[:,1]=M2[1,1];
      B[:,2]=M2[1,2];
      B[:,3]=M2[1,3];
      B[:,4]=M2[2,1];
      B[:,5]=M2[2,2];
      B[:,6]=M2[2,3];
      B[:,7]=M2[3,1];
      B[:,8]=M2[3,2];
      B[:,9]=M2[3,3];
      B[:,10]=M2[1,6];
      B[:,11]=M2[2,6];
      B[:,12]=M2[3,6];
      B[:,13]=M2[1,5];
      B[:,14]=M2[2,5];
      B[:,15]=M2[3,5];
      B[:,16]=M2[1,4];
      B[:,17]=M2[2,4];
      B[:,18]=M2[3,4];
      B[:,19]=M2[6,6];
      B[:,20]=M2[6,5];
      B[:,21]=M2[6,4];
      B[:,22]=M2[5,6];
      B[:,23]=M2[5,5];
      B[:,24]=M2[5,4];
      B[:,25]=M2[4,6];
      B[:,26]=M2[4,5];
      B[:,27]=M2[4,4];
      B[:,28]=M2[6,1];
      B[:,29]=M2[5,1];
      B[:,30]=M2[4,1];
      B[:,31]=M2[6,2];
      B[:,32]=M2[5,2];
      B[:,33]=M2[4,2];
      B[:,34]=M2[6,3];
      B[:,35]=M2[5,3];
      B[:,36]=M2[4,3];
  end

  return B

end
